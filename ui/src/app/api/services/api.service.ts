/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { loginForAccessTokenTokenPost } from '../fn/operations/login-for-access-token-token-post';
import { LoginForAccessTokenTokenPost$Params } from '../fn/operations/login-for-access-token-token-post';
import { readItemsItemsGet } from '../fn/operations/read-items-items-get';
import { ReadItemsItemsGet$Params } from '../fn/operations/read-items-items-get';
import { readUsersMeUsersMeGet } from '../fn/operations/read-users-me-users-me-get';
import { ReadUsersMeUsersMeGet$Params } from '../fn/operations/read-users-me-users-me-get';
import { rootGet } from '../fn/operations/root-get';
import { RootGet$Params } from '../fn/operations/root-get';
import { sendNewuserPost } from '../fn/operations/send-newuser-post';
import { SendNewuserPost$Params } from '../fn/operations/send-newuser-post';
import { sendSendPost } from '../fn/operations/send-send-post';
import { SendSendPost$Params } from '../fn/operations/send-send-post';
import { sendSendstrPost } from '../fn/operations/send-sendstr-post';
import { SendSendstrPost$Params } from '../fn/operations/send-sendstr-post';
import { Token } from '../models/token';

@Injectable({ providedIn: 'root' })
export class ApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `rootGet()` */
  static readonly RootGetPath = '/';

  /**
   * Root.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rootGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  rootGet$Response(params?: RootGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return rootGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Root.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rootGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rootGet(params?: RootGet$Params, context?: HttpContext): Observable<any> {
    return this.rootGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `readItemsItemsGet()` */
  static readonly ReadItemsItemsGetPath = '/items/';

  /**
   * Read Items.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `readItemsItemsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  readItemsItemsGet$Response(params?: ReadItemsItemsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return readItemsItemsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Read Items.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `readItemsItemsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  readItemsItemsGet(params?: ReadItemsItemsGet$Params, context?: HttpContext): Observable<any> {
    return this.readItemsItemsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `readUsersMeUsersMeGet()` */
  static readonly ReadUsersMeUsersMeGetPath = '/users/me';

  /**
   * Read Users Me.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `readUsersMeUsersMeGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  readUsersMeUsersMeGet$Response(params?: ReadUsersMeUsersMeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return readUsersMeUsersMeGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Read Users Me.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `readUsersMeUsersMeGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  readUsersMeUsersMeGet(params?: ReadUsersMeUsersMeGet$Params, context?: HttpContext): Observable<any> {
    return this.readUsersMeUsersMeGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `sendSendPost()` */
  static readonly SendSendPostPath = '/send';

  /**
   * Send.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendSendPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendSendPost$Response(params: SendSendPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return sendSendPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Send.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendSendPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendSendPost(params: SendSendPost$Params, context?: HttpContext): Observable<any> {
    return this.sendSendPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `sendSendstrPost()` */
  static readonly SendSendstrPostPath = '/sendstr';

  /**
   * Send.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendSendstrPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  sendSendstrPost$Response(params: SendSendstrPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return sendSendstrPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Send.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendSendstrPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  sendSendstrPost(params: SendSendstrPost$Params, context?: HttpContext): Observable<any> {
    return this.sendSendstrPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `sendNewuserPost()` */
  static readonly SendNewuserPostPath = '/newuser';

  /**
   * Send.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendNewuserPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendNewuserPost$Response(params: SendNewuserPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return sendNewuserPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Send.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendNewuserPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendNewuserPost(params: SendNewuserPost$Params, context?: HttpContext): Observable<any> {
    return this.sendNewuserPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `loginForAccessTokenTokenPost()` */
  static readonly LoginForAccessTokenTokenPostPath = '/token';

  /**
   * Login For Access Token.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `loginForAccessTokenTokenPost()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  loginForAccessTokenTokenPost$Response(params: LoginForAccessTokenTokenPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Token>> {
    return loginForAccessTokenTokenPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Login For Access Token.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `loginForAccessTokenTokenPost$Response()` instead.
   *
   * This method sends `application/x-www-form-urlencoded` and handles request body of type `application/x-www-form-urlencoded`.
   */
  loginForAccessTokenTokenPost(params: LoginForAccessTokenTokenPost$Params, context?: HttpContext): Observable<Token> {
    return this.loginForAccessTokenTokenPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Token>): Token => r.body)
    );
  }

}
